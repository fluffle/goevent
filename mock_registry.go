// Automatically generated by MockGen. DO NOT EDIT!
// Source: registry.go

package event

import (
	gomock "gomock.googlecode.com/hg/gomock"
)

// Mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *_MockHandlerRecorder
}

// Recorder for MockHandler (not exported)
type _MockHandlerRecorder struct {
	mock *MockHandler
}

func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &_MockHandlerRecorder{mock}
	return mock
}

func (m *MockHandler) EXPECT() *_MockHandlerRecorder {
	return m.recorder
}

func (m *MockHandler) Run(_param0 ...interface{}) {
	m.ctrl.Call(m, "Run", _param0)
}

func (mr *_MockHandlerRecorder) Run(, arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "Run", arg0)
}

func (m *MockHandler) Id() HandlerID {
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(HandlerID)
	return ret0
}

func (mr *_MockHandlerRecorder) Id() *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "Id")
}
// Mock of EventDispatcher interface
type MockEventDispatcher struct {
	ctrl     *gomock.Controller
	recorder *_MockEventDispatcherRecorder
}

// Recorder for MockEventDispatcher (not exported)
type _MockEventDispatcherRecorder struct {
	mock *MockEventDispatcher
}

func NewMockEventDispatcher(ctrl *gomock.Controller) *MockEventDispatcher {
	mock := &MockEventDispatcher{ctrl: ctrl}
	mock.recorder = &_MockEventDispatcherRecorder{mock}
	return mock
}

func (m *MockEventDispatcher) EXPECT() *_MockEventDispatcherRecorder {
	return m.recorder
}

func (m *MockEventDispatcher) Dispatch(name string, ev ...interface{}) {
	m.ctrl.Call(m, "Dispatch", name, ev)
}

func (mr *_MockEventDispatcherRecorder) Dispatch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "Dispatch", arg0, arg1)
}
// Mock of EventRegistry interface
type MockEventRegistry struct {
	ctrl     *gomock.Controller
	recorder *_MockEventRegistryRecorder
}

// Recorder for MockEventRegistry (not exported)
type _MockEventRegistryRecorder struct {
	mock *MockEventRegistry
}

func NewMockEventRegistry(ctrl *gomock.Controller) *MockEventRegistry {
	mock := &MockEventRegistry{ctrl: ctrl}
	mock.recorder = &_MockEventRegistryRecorder{mock}
	return mock
}

func (m *MockEventRegistry) EXPECT() *_MockEventRegistryRecorder {
	return m.recorder
}

func (m *MockEventRegistry) AddHandler(h Handler, names ...string) {
	m.ctrl.Call(m, "AddHandler", h, names)
}

func (mr *_MockEventRegistryRecorder) AddHandler(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "AddHandler", arg0, arg1)
}

func (m *MockEventRegistry) DelHandler(h Handler, names ...string) {
	m.ctrl.Call(m, "DelHandler", h, names)
}

func (mr *_MockEventRegistryRecorder) DelHandler(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "DelHandler", arg0, arg1)
}

func (m *MockEventRegistry) Dispatch(name string, ev ...interface{}) {
	m.ctrl.Call(m, "Dispatch", name, ev)
}

func (mr *_MockEventRegistryRecorder) Dispatch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "Dispatch", arg0, arg1)
}

func (m *MockEventRegistry) ClearEvents(name string) {
	m.ctrl.Call(m, "ClearEvents", name)
}

func (mr *_MockEventRegistryRecorder) ClearEvents(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCall(mr.mock, "ClearEvents", arg0)
}
